buildscript {
    ext {
        reactor_bom_version = 'Bismuth-BUILD-SNAPSHOT'
        kotlin_version = '1.1.2-eap-69'
        springBootVersion = '2.0.0.BUILD-SNAPSHOT'
        gradleNodePlugin = '1.1.1'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap-1.1" }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("com.moowork.gradle:gradle-node-plugin:$gradleNodePlugin")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-spring'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.gulp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = "1.0.0"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap-1.1" }
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

node {
    version = '6.9.4'
    download = true
}

noArg {
    annotation("org.springframework.data.mongodb.core.mapping.Document")
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    compile("org.springframework.boot:spring-boot-starter-webflux") {
        exclude module: "hibernate-validator"
    }
    compileOnly("org.springframework:spring-context-indexer")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")
    compile("org.springframework.boot:spring-boot-devtools")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    if (project.hasProperty("embed-mongo") || System.getProperty("idea.executable") == "idea") {
        runtime("de.flapdoodle.embed:de.flapdoodle.embed.mongo")
    } else {
        testRuntime("de.flapdoodle.embed:de.flapdoodle.embed.mongo")
    }

    compile("com.samskivert:jmustache:1.13")
    compile("com.atlassian.commonmark:commonmark:0.8.0")
    compile("com.atlassian.commonmark:commonmark-ext-autolink:0.8.0")


    compile("io.projectreactor:reactor-kotlin-extensions:1.0.0.M1")
    testCompile("io.projectreactor.addons:reactor-test")

    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
}

task gulpBuild(type: GulpTask) {
    dependsOn yarn
    inputs.dir("src/main/sass")
    inputs.dir("src/main/ts")
    inputs.dir("src/main/images")
    outputs.dir("build/resources/main/static")
    args = ["build"]
}

task gulpClean(type: GulpTask) {
    dependsOn yarn
    inputs.dir("build/.tmp")
    outputs.dir("build/resources/main/static")
    args = ["clean"]
}

processResources.dependsOn("gulpBuild")
clean.dependsOn("gulpClean")